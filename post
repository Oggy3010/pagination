Hi. Today we will create pagination for your custom collection.
At first I would say what it easy, just follow this instruction.
That's how it will look out: 
(picture)
I hoppe, you allready have your custom module and collection.
So,lets start.

config.xml:
<?xml version="1.0"?>
<config>
    <modules>
        <Pagination_Namespace>
            <version>1.0</version>
        </Pagination_Namespace>
    </modules>
    <frontend>
        <routers>
            <pagination_namespace>
                <use>standard</use>
                <args>
                    <module>Pagination_Namespace</module>
                    <frontName>namespace</frontName>
                </args>
            </pagination_namespace>
        </routers><!-- here creating prefix for link, after domain name it will be first word(http://namespacedomain.com/namespace)-->
        <layout>
            <updates>
                <pagination_namespace>
                    <file>pagination.xml</file>
                </pagination_namespace>
            </updates>
        </layout><!-- include layout file -->
    </frontend>
    <global>
        <blocks>
            <pagination_namespace>
                <class>Pagination_Namespace_Block</class>
            </pagination_namespace>
        </blocks>
        <helpers>
            <pagination_namespace>
                <class>Pagination_Namespace_Helper</class>
            </pagination_namespace>
        </helpers>
    </global><!-- in global section, including blocks and helpers -->
</config>

pagination.xml(layout) code:
<?xml version="1.0"?>
<layout>
    <pagination_namespace_index_index>
        <reference name="content">
            <block type="pagination_namespace/block" name="block"></block><!-- here, we include block file -->
        </reference>
    </pagination_namespace_index_index>
</layout>

On this code "<pagination_namespace_index_index>", we said system path to controller action. 
And here code of this action in IndexController.php:

<?php

class Pagination_Namespace_IndexController extends Mage_Core_Controller_Front_Action
{
    public function indexAction()
    {
        $this->loadLayout();
        $this->renderLayout();
    }

}
Here we just load layout.

Block.php(block):
<?php

class Pagination_Namespace_Block_Block extends Mage_Catalog_Block_Product_Abstract
{
    protected function _construct()
    {
        parent::_construct();
        $collection = Mage::getResourceModel('catalog/product_collection');// write here your collection
        $this->setCollection($collection);
        $this->setTemplate('namespace/pagination.phtml'); // here we include template to project
    }

    protected function _prepareLayout()
    {
        parent::_prepareLayout();
        $pager = $this->getLayout()->createBlock('page/html_pager', 'custom.pager'); // getting core block "pager"
        $pager->setAvailableLimit(array(1=>1,2=>2,3=>3,'all'=>'all')); // set numbering for our pagination
        $pager->setCollection($this->getCollection());
        $this->setChild('pager', $pager);
        $this->getCollection()->load();
        return $this;
    }

    public function getPagerHtml()
    {
        return $this->getChildHtml('pager'); // we will call this method from template
    }

}
And the last step...template.

pagination.phtml code:
<?php
$collection = $this->getCollection();
echo $this->getPagerHtml();
if ($collection->getData() !== null) : $collection->getSize();// check if there is something in our collection, if yes - show content with pagination.
?>
    <table>
        <?php foreach($collection as $value) :?>
            <tr>
                <td><h1><?php echo $value->getName() ?></h1></td>
            </tr>
        <?php endforeach ?>
    </table>
<?php endif;

After that, cleen your cache and go on this URL in your browser http://project.com/namespace/
If you don't now how cleen cache comforteble and faster, read this post http://www.atwix.com/magento/using-mage-run-to-speed-up-development/
